"""
Django settings for oduna_BE project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
import sys
from decouple import Csv, config
from corsheaders.defaults import default_headers
# from dj_database_url import parse as db_url
import dj_database_url
from .json_formatters import CustomJsonFormatter


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-qey_x-qw*3llo51=tnr-srv6jedt)-*h3_hdr=u3_y!lhi*_^u",
)

FERNET_KEYS = config("FERNET_KEYS", cast=Csv())
# SECURITY WARNING: don't run with debug turned on in production!
FRONTEND_URL = config("FRONTEND_URL", "https://oduna.vercel.app")

BACKEND_HOST_SCHEME = config("BACKEND_HOST_SCHEME", default="http://")
BACKEND_HOST = config("BACKEND_HOST", default="127.0.0.1:8000")
BACKEND_URL = config("BACKEND_URL", default=(BACKEND_HOST_SCHEME + BACKEND_HOST))

BACKEND_ADMIN_URL = config(
    "BACKEND_ADMIN_URL",
)
DEBUG = config("DEBUG", default=False, cast=bool)
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv()) + [BACKEND_HOST]
SITE_ID = 1
ENVIRONMENT = config("ENVIRONMENT", default="PRODUCTION")
PLATFORM_KEY = config(
    "PLATFORM_KEY",
    default="oduna",
)
try:
    TESTING = "test" == sys.argv[1]
except IndexError:
    TESTING = config("TESTING", default=False, cast=bool)

# Application definition

INSTALLED_APPS = [
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # third party libraries
    "cloudinary_storage",
    "cloudinary",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_extensions",
    # custom apps
    "blog",
    "main",
    "core",
    "general",
    "user",

]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# custom middleware
MIDDLEWARE += (
    [
        "user.middleware.RequestHeadersMiddleware",
        "user.middleware.RequestLogMiddleware",
    ]
    if not TESTING
    else []
)

ROOT_URLCONF = "oduna_BE.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "oduna_BE.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASE_URL = config(
        "DATABASE_URL",
        default="sqlite:///" + os.path.join(BASE_DIR, "oduna.sqlite3"),
)
DATABASES = {
    "default": dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# OR
# DATABASES = {
#     "default": config(
#         "DATABASE_URL",
#         default="sqlite:///" + os.path.join(BASE_DIR, "oduna.sqlite3"),
#         cast=db_url,
#     )
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        "OPTIONS": {
            "max_similarity": 0.7,
            "user_attributes": (
                "first_name",
                "last_name",
                "email",
                "user_type",
                "contact_no",
                "date_of_birth",
                "gender",
                "street",
                "city",
                "state",
                "country",
                "region",
            ),
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 10,
        },
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
    # custom coded validators
    {
        "NAME": "user.validators.UppercaseValidator",
    },
    {
        "NAME": "user.validators.SpecialCharValidator",
    },
]



# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = BACKEND_URL + "/static/"
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
    # os.path.join(BASE_DIR, "staticfiles"),
)
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_URL = BACKEND_URL + "/media/"
MEDIA_ROOT = BASE_DIR / "media"
if not TESTING:
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ################################### CORS SETTINGS ################################################
# CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOWED_ORIGINS = config("CORS_ALLOWED_ORIGINS", cast=Csv()) + [FRONTEND_URL]

CORS_ALLOW_HEADERS = config(
    "CORS_ALLOW_HEADERS", default="", cast=Csv()
) + list(default_headers)
AUTH_USER_MODEL = "user.User"

# REST FRAMEWORK CONFIGURATION

ANON_THROTTLE_THRESHOLD = config("ANON_THROTTLE_THRESHOLD", default="10/minute")
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "core.schema.AutoSchema",
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "EXCEPTION_HANDLER": "core.exceptions.custom_exception_handler",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
    ),
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
    ],
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
    ],
    # "DEFAULT_THROTTLE_RATES": {
    #     "anon": ANON_THROTTLE_THRESHOLD,
    # },
}


# EMAIL SETTINGS
EMAIL_BACKEND = config(
    "EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = config("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = config("EMAIL_PORT", default=465)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=False, cast=bool)
EMAIL_USE_SSL = config("EMAIL_USE_SSL", default=True, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")

DEFAULT_FROM_EMAIL = config("EMAIL_HOST_USER")
INFO_EMAIL = config("EMAIL_HOST_USER")
SUPPORT_EMAIL = config("EMAIL_HOST_USER")

EXTRA_EMAILS = config("EXTRA_EMAILS", default="odeyemiincrease@yahoo.com", cast=Csv())

PROJECT_DEFAULT_EMAIL_PROVIDER = config(
    "PROJECT_DEFAULT_EMAIL_PROVIDER", default="odeyemiincrease@yahoo.com"
)

# JWT CONFIGURATION
ACCESS_TOKEN_LIFETIME = config("ACCESS_TOKEN_LIFETIME", default=60, cast=int)
REFRESH_TOKEN_LIFETIME = config("REFRESH_TOKEN_LIFETIME", default=120, cast=int)

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=ACCESS_TOKEN_LIFETIME),
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=REFRESH_TOKEN_LIFETIME),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "user_login_token",
    "USER_ID_CLAIM": "user_login_token",
    "USER_AUTHENTICATION_RULE": "user.authentication.user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_REFRESH_SERIALIZER": "user.serializers.CustomTokenRefreshSerializer",
    "TOKEN_OBTAIN_SERIALIZER": "user.serializers.MyTokenObtainPairSerializer",
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}


# Logging configuration


LOGGING = {
    "version": 1,
    "disable_settings_# loggers": False,  # remove all other # loggers
    "formatters": {  # the format you want your log in
        "main_formatter": {"()": CustomJsonFormatter},
        "debug_formatter": {"format": "{asctime} - {message}", "style": "{"},
    },
    "handlers": {  # where do you want to keep the log
        "console": {
            "class": "logging.StreamHandler",  # this will output the log it to the console
            "formatter": "main_formatter",
        },
        "dev_console": {
            "class": "logging.StreamHandler",  # this will output the log it to the console
            "formatter": "debug_formatter",
        },
        "file": {
            "class": "logging.FileHandler",  # this will output the log it to the console
            "formatter": "main_formatter",
            "filename": "main.log",
        },
        "payment_handler": {
            "class": "logging.FileHandler",  # this will output the log it to the console
            "formatter": "main_formatter",
            "filename": "payment.log",
        },
    },
    "loggers": {
        "main": {"handlers": ["file"], "propagate": True, "level": "INFO"},
        "payment": {"handlers": ["file"], "propagate": True, "level": "INFO"},
        "debug": {"handlers": ["dev_console"], "propagate": True, "level": "DEBUG"},
    },
}


# SWAGGER SETTINGS


SPECTACULAR_SETTINGS = {
    "TITLE": "The ODUNA Project API",
    "DESCRIPTION": "The O.D.U.N.A Project API documentation",
    "VERSION": 1,
    "SERVE_PERMISSIONS": [] if DEBUG else ["user.permissions.DeveloperPermission"],
}


CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config("CLOUDINARY_CLOUD_NAME"),
    'API_KEY': config("CLOUDINARY_API_KEY"),
    'API_SECRET': config("CLOUDINARY_API_SECRET")
}